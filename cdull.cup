/**********************************************************************
 Java CUP specification for a parser for cdull programs
 **********************************************************************/

import java_cup.runtime.*;
import java.util.*;

/* The code below redefines method syntax_error to give better error messages
 * than just "Syntax error"
 */
parser code {:

public void syntax_error(Symbol currToken) {
    if (currToken.value == null) {
        ErrMsg.fatal(0,0, "Syntax error at end of file");
    }
    else {
        ErrMsg.fatal(((TokenVal)currToken.value).linenum,
                     ((TokenVal)currToken.value).charnum,
                     "Syntax error");
    }
    System.exit(-1);
}
:};


/* Terminals (tokens returned by the scanner) */
terminal                INT;
terminal                BOOL;
terminal                VOID;
terminal                TRUE;
terminal                FALSE;
terminal                STRUCT;
terminal                CIN;
terminal                COUT;
terminal                IF;
terminal                ELSE;
terminal                WHILE;
terminal		REPEAT;
terminal                RETURN;
terminal IdTokenVal     ID;
terminal IntLitTokenVal INTLITERAL;
terminal StrLitTokenVal STRINGLITERAL;
terminal                LCURLY;
terminal                RCURLY;
terminal                LPAREN;
terminal                RPAREN;
terminal                SEMICOLON;
terminal                COMMA;
terminal                DOT;
terminal                WRITE;
terminal                READ;
terminal                PLUSPLUS;
terminal                MINUSMINUS;
terminal                PLUS;
terminal                MINUS;
terminal                TIMES;
terminal                DIVIDE;
terminal                NOT;
terminal                AND;
terminal                OR;
terminal                EQUALS;
terminal                NOTEQUALS;
terminal                LESS;
terminal                GREATER;
terminal                LESSEQ;
terminal                GREATEREQ;
terminal                ASSIGN;


/* Nonterminals
 *
 * NOTE: You will need to add more nonterminals to this list as you
 *       add productions to the grammar below.
 */
non terminal ProgramNode      program;  // done
non terminal LinkedList       declList; //done
non terminal DeclNode         decl;     // done
non terminal VarDeclNode      varDecl;  // done
non terminal TypeNode         type;     //done
non terminal IdNode           id;       // done
non terminal AssignNode       assignExp;    // done
non terminal ExpNode          loc;      // done
non terminal StmtNode         stmt;     // done
non terminal LinkedList       varDeclList;  // done
non terminal LinkedList       structBody; // done
non terminal LinkedList       actualList;   // done
non terminal FormalDeclNode   formalDecl;// done
non terminal StructDeclNode   structDecl;   // done
non terminal LinkedList       stmtList;     // done
non terminal LinkedList       varDeclList;  // done

 
 
/* NOTE: Add precedence and associativity declarations here */
// ORDER OF precendence is low to high
// plus and minus are given the lowest precendence
// 
// for example
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;
// 

start with program;


/* Grammar with actions
 *
 * NOTE: add more grammar rules below
 */

actualList      ::= exp:e
                {:
                    LinkedList<ExpNode> list = new LinkedList<ExpNode>();
                    list.addLast(e);
                    RESULT = list;
                :}
                | actualList:al COMMA exp:e
                {:
                    al.addLast(e);
                    RESULT = al;
                :}
                ;


assignExp       ::= loc:l ASSIGN exp:e
                {: 
                    RESULT = new AssignNode(l,e);
                :}
                ;

loc             ::= id:i
                {:
                    RESULT = i;
                :}
                | loc:l DOT id:i
                {:
                    RESULT = new DotAccessExpNode(l,i);
                :}
                ;

stmt            ::= assignExp:a SEMICOLON
                {:
                    RESULT = new AssignStmtNode(a);
                :}
                | loc:l PLUSPLUS SEMICOLON
                {:
                    RESULT = new PostIncStmtNode(l);
                :}
                | loc:l MINUSMINUS SEMICOLON
                {:
                    RESULT = new PostDecStmtNode(l);
                :}
                | CIN READ loc:l SEMICOLON
                {:
                    RESULT = new ReadStmtNode(l);
                :}
                | COUT WRITE exp:e SEMICOLON
                {:
                    RESULT = new WriteStmtNode(e);
                :}
                | IF LPAREN exp:e RPAREN LCURLY varDeclList:vdl stmtList:stl RCURLY
                {:
                    RESULT = new IfStmtNode(e, new DeclListNode(vdl), new StmtListNode(stl));
                :}
                | IF LPAREN exp:e RPAREN LCURLY varDeclList:vdl1 stmtList:stl1 RCURLY ELSE LCURLY varDeclList:vdl2 stmtList:stl2 RCURLY
                {:
                    RESULT = new IfElseStmtNode(e, new DeclListNode(vdl1), new StmtListNode(stl1), new DeclListNode(vdl2), new StmtListNode(stl2));
                :}
                | WHILE LPAREN exp:e RPAREN LCURLY varDeclList:vdl stmtList:stl RCURLY
                {:
                    RESULT = new WhileStmtNode(e, new DeclListNode(vdl), new StmtListNode(stl));
                :}
                | REPEAT LPAREN exp:e RPAREN LCURLY varDeclList:vdl stmtList:stl RCURLY
                {:
                    RESULT = new RepeatStmtNode(e, new DeclListNode(vdl), new StmtListNode(stl));
                :}
                | RETURN exp:e SEMICOLON
                {:
                    RESULT = new ReturnStmtNode(e);
                :}
                | RESULT SEMICOLON
                {:
                    RESULT = new ReadStmtNode(null);
                :}
                | fncall:fc SEMICOLON
                {:
                    RESULT = new CallStmtNode(fc);
                :}
                ;


    
program         ::= declList: d
                {: RESULT = new ProgramNode(new DeclListNode(d));
                :}
                ;

declList        ::= declList:dl decl:d
                {: dl.addLast(d);
                   RESULT = dl;
                :}
                | /* epsilon */
                {: RESULT = new LinkedList<DeclNode>();
                :}
                ;


decl            ::= varDecl:v
                {: RESULT = v;
                :}
                ;

varDeclList     ::= varDeclList:dl varDecl:vd
                {:
                    dl.addLast(vd);
                    RESULT =dl;
                :}
                | /* epsilon */
                {:
                    RESULT = new LinkedList<DeclNode>();
                :}

stmtList        ::= stmtList:stl stmt:st
                {:
                    stl.addLast(st);
                    RESULT = stl;
                :}
                | /* epsilon */
                {:
                    RESULT = new LinkedList<StmtNode>();
                :}

formalDecl      ::= type:t id:i      // note: no struct parameters
                {:
                    RESULT = new FormalDeclNode(t, i);
                :}
                ;


structBody      ::= structBody:sb varDecl:vd
                {:
                    sb.addLast(vd);
                    RESULT = sb;
                :}
                | varDecl:vd
                {:
                    LinkedList<DeclNode>() list = new LinkedList<DeclNode>();
                    list.addLast(vd);
                    RESULT = list;
                :}
                ;

structDecl      ::= STRUCT id:i LCURLY structBody:strb RCURLY SEMICOLON
                {:
                    RESULT = new StructDeclNode(i, new DeclListNode(strb) );
                :}
                ;


varDecl         ::= type:t id:i SEMICOLON
                {: 
                    RESULT = new VarDeclNode(t, i, VarDeclNode.NOT_STRUCT);
                :}
                | STRUCT id:i1 id:i2 SEMICOLON               
                {:
                    RESULT = new VarDeclNode(new StructNode(i1), i2, 0);
                :}
                ;


type            ::= INT
                {: RESULT = new IntNode();
                :}
                | BOOL
                {:	RESULT = new BoolNode();
                :}
                | VOID
                {: RESULT = new VoidNode();
                :}
                ;

id              ::= ID:i
                {: RESULT = new IdNode(i.linenum, i.charnum, i.idVal);
                :}
                ;
				
