/**********************************************************************
 Java CUP specification for a parser for cdull programs
 **********************************************************************/

import java_cup.runtime.*;
import java.util.*;

/* The code below redefines method syntax_error to give better error messages
 * than just "Syntax error"
 */
parser code {:

public void syntax_error(Symbol currToken) {
    if (currToken.value == null) {
        ErrMsg.fatal(0,0, "Syntax error at end of file");
    }
    else {
        ErrMsg.fatal(((TokenVal)currToken.value).linenum,
                     ((TokenVal)currToken.value).charnum,
                     "Syntax error");
    }
    System.exit(-1);
}
:};


/* Terminals (tokens returned by the scanner) */
terminal                INT;
terminal                BOOL;
terminal                VOID;
terminal   TokenVal             TRUE;
terminal   TokenVal             FALSE;
terminal                STRUCT;
terminal                CIN;
terminal                COUT;
terminal                IF;
terminal                ELSE;
terminal                WHILE;
terminal		REPEAT;
terminal                RETURN;
terminal IdTokenVal     ID;
terminal IntLitTokenVal INTLITERAL;
terminal StrLitTokenVal STRINGLITERAL;
terminal                LCURLY;
terminal                RCURLY;
terminal                LPAREN;
terminal                RPAREN;
terminal                SEMICOLON;
terminal                COMMA;
terminal                DOT;
terminal                WRITE;
terminal                READ;
terminal                PLUSPLUS;
terminal                MINUSMINUS;
terminal                PLUS;
terminal                MINUS;
terminal                TIMES;
terminal                DIVIDE;
terminal                NOT;
terminal                AND;
terminal                OR;
terminal                EQUALS;
terminal                NOTEQUALS;
terminal                LESS;
terminal                GREATER;
terminal                LESSEQ;
terminal                GREATEREQ;
terminal                ASSIGN;


/* Nonterminals
 *
 * NOTE: You will need to add more nonterminals to this list as you
 *       add productions to the grammar below.
 */
non terminal ProgramNode      program; // DONE
non terminal LinkedList       declList; // 
non terminal DeclNode         decl;       // 
non terminal VarDeclNode      varDecl;    // DONE
non terminal TypeNode         type;       // DONE 
non terminal IdNode           id;         // DONE 
non terminal LinkedList       structBody; //    
non terminal StructDeclNode   structDecl;   //   
non terminal LinkedList       actualList;   // 
non terminal AssignNode       assignExp;   // 
non terminal ExpNode          exp;
non terminal ExpNode          loc;      // 
non terminal ExpNode          term;
non terminal FormalsListNode  formals;
non terminal LinkedList       formalsList;
non terminal FnBodyNode       fnBody;
non terminal LinkedList       varDeclList;
non terminal StmtNode         stmt;
non terminal LinkedList       stmtList;
non terminal  FnDeclNode        fnDecl;
non terminal CallExpNode      fncall;
non terminal FormalDeclNode formalDecl;



 
 
/* NOTE: Add precedence and associativity declarations here */
precedence right ASSIGN;
precedence left DOT;
precedence left OR;
precedence left AND;
precedence nonassoc NOTEQUALS, EQUALS, GREATER ,GREATEREQ, LESS, LESSEQ;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;
precedence left NOT;


start with program;


/* Grammar with actions
 *
 * NOTE: add more grammar rules below
 */
program         ::= declList: d
                {: RESULT = new ProgramNode(new DeclListNode(d));
                :}
                ;

actualList      ::= exp:e
                {:
                    LinkedList<ExpNode> list = new LinkedList<ExpNode>();
                    list.addLast(e);
                    RESULT = list;
                :}
                | actualList:al COMMA exp:e
                {:
                    al.addLast(e);
                    RESULT = al;
                :}
                ;
loc             ::= id:i
                {:
                    RESULT = i;
                :}
                | loc:l DOT id:i
                {:
                    RESULT = new DotAccessExpNode(l,i);
                :}
                ;


assignExp       ::= loc:l ASSIGN exp:e
                {: 
                    RESULT = new AssignNode(l,e);
                :}
                ;



exp             ::= assignExp:as
                {:
                  RESULT = as;
                :}
                | exp:e1 PLUS exp:e2
                {:
                  RESULT = new PlusNode(e1, e2);
                :}
                | exp:e1 MINUS exp:e2
                {:
                  RESULT = new MinusNode(e1, e2);
                :}
                | exp:e1 TIMES exp:e2
                {:
                  RESULT = new TimesNode(e1, e2);
                :}
                | exp:e1 DIVIDE exp:e2
                {:
                  RESULT = new DivideNode(e1, e2);
                :}
                | NOT exp:e
                {:
                  RESULT = new NotNode(e);
                :}
                | exp:e1 AND exp:e2
                {:
                  RESULT = new AndNode(e1, e2);
                :}
                | exp:e1 OR exp:e2
                {:
                  RESULT = new OrNode(e1, e2);
                :}
                | exp:e1 EQUALS exp:e2
                {:
                  RESULT = new EqualsNode(e1, e2);
                :}
                | exp:e1 NOTEQUALS exp:e2
                {:
                  RESULT = new NotEqualsNode(e1, e2);
                :}
                | exp:e1 LESS exp:e2
                {:
                  RESULT = new LessNode(e1, e2);
                :}
                | exp:e1 GREATER exp:e2
                {:
                  RESULT = new GreaterNode(e1, e2);
                :}
                | exp:e1 LESSEQ exp:e2
                {:
                  RESULT = new LessEqNode(e1, e2);
                :}
                | exp:e1 GREATEREQ exp:e2
                {:
                  RESULT = new GreaterEqNode(e1, e2);
                :}
                | MINUS term:t
                {:
                  RESULT = new UnaryMinusNode(t);
                :}
                | term:t
                {:
                  RESULT = t;
                :}
                ;

declList        ::= declList:dl decl:d
                {: dl.addLast(d);
                   RESULT = dl;
                :}
                | /* epsilon */
                {: RESULT = new LinkedList<DeclNode>();
                :}
                ;


varDeclList     ::= varDeclList:dl varDecl:vd
                {:
                    dl.addLast(vd);
                    RESULT =dl;
                :}
                | /* epsilon */
                {:
                    RESULT = new LinkedList<DeclNode>();
                :}
                ;

stmt            ::= assignExp:a SEMICOLON
                {:
                    RESULT = new AssignStmtNode(a);
                :}
                | loc:l PLUSPLUS SEMICOLON
                {:
                    RESULT = new PostIncStmtNode(l);
                :}
                | loc:l MINUSMINUS SEMICOLON
                {:
                    RESULT = new PostDecStmtNode(l);
                :}
                | CIN READ loc:l SEMICOLON
                {:
                    RESULT = new ReadStmtNode(l);
                :}
                | COUT WRITE exp:e SEMICOLON
                {:
                    RESULT = new WriteStmtNode(e);
                :}
                | IF LPAREN exp:e RPAREN LCURLY varDeclList:vdl stmtList:stl RCURLY
                {:
                    RESULT = new IfStmtNode(e, new DeclListNode(vdl), new StmtListNode(stl));
                :}
                | IF LPAREN exp:e RPAREN LCURLY varDeclList:vdl1 stmtList:stl1 RCURLY ELSE LCURLY varDeclList:vdl2 stmtList:stl2 RCURLY
                {:
                    RESULT = new IfElseStmtNode(e, new DeclListNode(vdl1), new StmtListNode(stl1), new DeclListNode(vdl2), new StmtListNode(stl2));
                :}
                | WHILE LPAREN exp:e RPAREN LCURLY varDeclList:vdl stmtList:stl RCURLY
                {:
                    RESULT = new WhileStmtNode(e, new DeclListNode(vdl), new StmtListNode(stl));
                :}
                | REPEAT LPAREN exp:e RPAREN LCURLY varDeclList:vdl stmtList:stl RCURLY
                {:
                    RESULT = new RepeatStmtNode(e, new DeclListNode(vdl), new StmtListNode(stl));
                :}
                | RETURN exp:e SEMICOLON
                {:
                    RESULT = new ReturnStmtNode(e);
                :}
                | RETURN SEMICOLON
                {:
                    RESULT = new ReturnStmtNode(null);
                :}
                | fncall:fc SEMICOLON
                {:
                    RESULT = new CallStmtNode(fc);
                :}
                ;


fncall          ::=  id:i LPAREN RPAREN   // fn call with no args
		            {:
		              RESULT = new CallExpNode(i);
		            :} 
                | id:i LPAREN actualList:al RPAREN  // with args
		            {:
		              RESULT = new CallExpNode(i, new ExpListNode(al));
		            :} 
                ;

stmtList        ::= stmtList:sl stmt:s
		            {:
		              sl.addLast(s);
		              RESULT = sl;
		            :} 
                | /* epsilon */
		            {:
		              LinkedList<StmtNode> sl = new LinkedList<StmtNode>();
  		            RESULT = sl;
		            :} 
                ;

fnBody          ::= LCURLY varDeclList:vdl stmtList:sl RCURLY
                {:
                  RESULT = new FnBodyNode(new DeclListNode(vdl), new StmtListNode(sl));
                :}
                ;

formalDecl      ::= type:t id:i        // note: no struct parameters
                {:
                  RESULT = new FormalDeclNode(t,i);
                :}
                ;


formals         ::= LPAREN RPAREN
                {:
                  RESULT = new FormalsListNode(new LinkedList<FormalDeclNode>());
                :}
                | LPAREN formalsList:fl RPAREN
                {:
                  RESULT = new FormalsListNode(fl);
                :}
                ;


formalsList     ::= formalDecl:fdl
                {:
                  LinkedList<FormalDeclNode> l = new LinkedList<FormalDeclNode>();
                  l.addFirst(fdl);
                  RESULT = l;
                :}
                | formalDecl:fd COMMA formalsList:fl
                {:
                  fl.addFirst(fd);
                  RESULT = fl;
                :}
                ;

fnDecl		    ::= type:t id:i formals:f fnBody:fb
                {:
                  RESULT = new FnDeclNode(t, i, f, fb);
                :}
                ;

decl            ::= varDecl:v
                {: RESULT = v;
                :}
                | fnDecl:fd
                {:
                  RESULT = fd;
                :}
                | structDecl:sd
                {:
                  RESULT = sd;
                :}
                ;

structBody      ::= structBody:sb varDecl:vd
                {:
                    sb.addLast(vd);
                    RESULT = sb;
                :}
                | varDecl:vd
                {:
                    LinkedList<DeclNode> list = new LinkedList<DeclNode>();
                    list.addLast(vd);
                    RESULT = list;
                :}
                ;

structDecl      ::= STRUCT id:i LCURLY structBody:strb RCURLY SEMICOLON
                {:
                    RESULT = new StructDeclNode(i, new DeclListNode(strb) );
                :}
                ;

term            ::= loc: l
                {:
                  RESULT = l;
                :}
                | INTLITERAL:i
                {:
                  RESULT = new IntLitNode(i.linenum, i.charnum, i.intVal);
                :}
                | STRINGLITERAL:s
                {:
                  RESULT = new StringLitNode(s.linenum, s.charnum, s.strVal);
                :}
                | TRUE:t
                {:
                  RESULT = new TrueNode(t.linenum, t.charnum);
                :}
                | FALSE:f
                {:
                  RESULT = new FalseNode(f.linenum, f.charnum);
                :}
                | LPAREN exp:e RPAREN
                {:
                  e.isP = true;
                  RESULT = e;
                :}
                | fncall:fc
                {:
                  RESULT = fc;
                :}
                ;    

varDecl         ::= type:t id:i SEMICOLON
                {: 
                    RESULT = new VarDeclNode(t, i, VarDeclNode.NOT_STRUCT);
                :}
                | STRUCT id:i1 id:i2 SEMICOLON               
                {:
                    RESULT = new VarDeclNode(new StructNode(i1), i2, 0);
                :}
                ;


type            ::= INT
                {: RESULT = new IntNode();
                :}
                | BOOL
                {:	RESULT = new BoolNode();
                :}
                | VOID
                {: RESULT = new VoidNode();
                :}
                ;

id              ::= ID:i
                {: RESULT = new IdNode(i.linenum, i.charnum, i.idVal);
                :}
                ;

